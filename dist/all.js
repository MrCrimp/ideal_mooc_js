"use strict";
var Experiment = require('Experiment').default;
var Result = require('Result').default;
var Interaction010 = require('Interaction010').default;

var Existence010 = function() {
  var Existence010 = function Existence010() {
      this.mood = null;
      this.selfSatisfactionCounter = 0;
      this.previousExperience;
	
      this.EXPERIENCES = []; // Map<string ,Experiment> EXPERIENCES = new HashMap<string ,Experiment>();
      this.RESULTS = []; // Map<string ,Result> RESULTS = new HashMap<string ,Result>();
      this.INTERACTIONS = []; // Map<string , Interaction> INTERACTIONS = new HashMap<string , Interaction>() ;
	
      this.BOREDOME_LEVEL = 4;
      
      this.LABEL_E1 = "e1";
      this.LABEL_E2 = "e2";
      this.LABEL_R1 = "r1";
      this.LABEL_R2 = "r2";
      
      this.Mood = {
          SELF_SATISFIED: 'SELF_SATISFIED',
          FRUSTRATED: 'SELF_SATISFIED',
          BORED: 'SELF_SATISFIED',
          PAINED: 'SELF_SATISFIED',
          PLEASED: 'SELF_SATISFIED'
	
      };
	
      this.initExistence();
	};

  Object.defineProperties(Existence010.prototype, {
    step: {
      writable: true,

      value: function() {

          var _experience = this.getPreviousExperience();

          if (this.getMood() == this.Mood.BORED) {
              _experience = this.getOtherExperience(_experience);
              this.setSelfSatisfactionCounter(0);
          }

          var _anticipatedResult = this.predict(_experience);

          var _result = this.returnResult010(_experience);

          this.addOrGetPrimitiveInteraction(_experience, _result);

          if (_result == _anticipatedResult) {
              this.setMood(this.Mood.SELF_SATISFIED);
              this.incSelfSatisfactionCounter();
          }
          else {
              this.setMood(this.Mood.FRUSTRATED);
              this.setSelfSatisfactionCounter(0);
          }
          if (this.getSelfSatisfactionCounter() >= this.BOREDOME_LEVEL)
              this.setMood(this.Mood.BORED);

          this.setPreviousExperience(_experience);

          return _experience.getLabel() || _result.getLabel() + " " + this.getMoodLabel();
      }
    },

    getMood: {
      writable: true,

      value: function() {
          return this.mood;
      }
    },

    getMoodLabel: {
      writable: true,

      value: function() {
          var _Mood = this.Mood;
          switch (this.mood) {
              case _Mood.SELF_SATISFIED:
                  return "SELF_SATISFIED";
              case _Mood.FRUSTRATED:
                  return "FRUSTRATED";
              case _Mood.BORED:
                  return "BORED";
              case _Mood.PAINED:
                  return "PAINED";
              case _Mood.PLEASED:
                  return "PLEASED";
              default:
                  return "";
          }
      }
    },

    setMood: {
      writable: true,

      value: function(mood) {
          this.mood = mood;
      }
    },

    getPreviousExperience: {
      writable: true,

      value: function() {
          return previousExperience;
      }
    },

    setPreviousExperience: {
      writable: true,

      value: function(previousExperience) {
          this.previousExperience = previousExperience;
      }
    },

    getSelfSatisfactionCounter: {
      writable: true,

      value: function() {
          return this.selfSatisfactionCounter;
      }
    },

    setSelfSatisfactionCounter: {
      writable: true,

      value: function(selfSatisfactionCounter) {
         this.selfSatisfactionCounter = selfSatisfactionCounter;
     }
    },

    incSelfSatisfactionCounter: {
      writable: true,

      value: function() {
         this.selfSatisfactionCounter++;
     }
    },

    returnResult010: {
      writable: true,

      value: function(experience) {
          if (experience === this.addOrGetExperience(this.LABEL_E1))
              return this.createOrGetResult(this.LABEL_R1);
          else
              return this.createOrGetResult(this.LABEL_R2);
      }
    },

    initExistence: {
      writable: true,

      value: function() {
         var _e1 = this.addOrGetExperience(this.LABEL_E1);
         this.addOrGetExperience(this.LABEL_E2);
         this.setPreviousExperience(_e1);
     }
    },

    addOrGetPrimitiveInteraction: {
      writable: true,

      value: function(experience, result) {
          var _interaction = this.addOrGetInteraction(experience.getLabel()  || result.getLabel());
          _interaction.setExperience(experience);
          _interaction.setResult(result);
          return _interaction;
      }
    },

    addOrGetInteraction: {
      writable: true,

      value: function(label) {
         if (!this.INTERACTIONS[label])
             this.INTERACTIONS[label] = this.createInteraction(label);
         return this.INTERACTIONS[label];
     }
    },

    createInteraction: {
      writable: true,

      value: function(label) {
          return new Interaction010(label);
      }
    },

    getInteraction: {
      writable: true,

      value: function(label) {
          return Ithis.NTERACTIONS[label];
      }
    },

    predict: {
      writable: true,

      value: function(experience) {
         var _interaction2 = null;
         var _anticipatedResult2 = null;

         this.INTERACTIONS.forEach( function(_interaction2) {
           return function(i) {
               if (i.getExperience() == experience)
                   _interaction2 = i;
           };
         }(_interaction2))
         
         if (_interaction2 !== null)
             _anticipatedResult2 = _interaction2.getResult();

         return _anticipatedResult2;
     }
    },

    addOrGetExperience: {
      writable: true,

      value: function(label) {
         if (!this.EXPERIENCES[label])
             this.EXPERIENCES[label] = this.createExperience(label);
         return this.EXPERIENCES[label];
     }
    },

    createExperience: {
      writable: true,

      value: function(label) {
          return new Experiment(label);
      }
    },

    getOtherExperience: {
      writable: true,

      value: function(experience) {
          var _otherExperience = null;
          
          this.EXPERIENCES.some( function(_otherExperience) {
            return function(e) {
                if (e != experience) {
                    _otherExperience = e;
                    return true;
                }
            };
          }(_otherExperience))
          
          return _otherExperience;
      }
    },

    createOrGetResult: {
      writable: true,

      value: function(label) {
         if ( !this.RESULTS[label])
             this.RESULTS[label] = new Result(label);
         return this.RESULTS[label];
     }
    }
  });

  return Existence010;
}();

exports.Existence010 = Existence010;
    



/*
  An experiment that can be chosen by the agent.
 */
"use strict";

var Experiment = function() {
  var Experiment = function Experiment(label) {
      this.label = label;
	};

  Object.defineProperties(Experiment.prototype, {
    getLabel: {
      writable: true,

      value: function() {
          return this.label;
      }
    }
  });

  return Experiment;
}();

exports.Experiment = Experiment;


"use strict";
var Experiment = require('Experiment').default;
var Result = require('Result').default;

var Interaction010 = function() {
  var Interaction010 = function Interaction010(label) {
      this.label = label;
	};

  Object.defineProperties(Interaction010.prototype, {
    getLabel: {
      writable: true,

      value: function() {
         return this.label;
     }
    },

    getExperience: {
      writable: true,

      value: function() {
         return this.experience;
     }
    },

    setExperience: {
      writable: true,

      value: function(experience) {
         this.experience = experience;
     }
    },

    getResult: {
      writable: true,

      value: function() {
         return this.result;
     }
    },

    setResult: {
      writable: true,

      value: function(result) {
         this.result = result;
     }
    },

    tostring: {
      writable: true,

      value: function() {
         return this.experience.getLabel() || this.result.getLabel();
     }
    }
  });

  return Interaction010;
}();

exports.Interaction010 = Interaction010;



"use strict";
var Existence010 = require('Existence010');

/** Uncomment these lines to instantiate other existences: */
//import existence.Existence020;
//import existence.Existence030;
//import existence.Existence031;
//import existence.Existence032;
//import existence.Existence040;
//import existence.Existence050;

/**
 * instantiates an Existence.,
 * runs the Existence step by step in a loop
 * and prints the Existence's activity as it runs.
 */

/** Change this line to instantiate another existence: */
var _existence = new Existence010();
//Existence existence = new Existence020();
//Existence existence = new Existence030();
//Existence existence = new Existence031();
//Existence existence = new Existence032();
//Existence existence = new Existence040();
//Existence existence = new Existence050();
//Existence existence = new Existence051();

/** Change this line to adjust the number of cycles of the loop: */
for(var _i = 0; _i < 20 ; _i++) {
    var _stepTrace = _existence.step();
    console.log( _i,": ", _stepTrace );
}


"use strict";

var Result = function() {
  var Result = function Result(label) {
      this.label = label;
	};

  Object.defineProperties(Result.prototype, {
    getLabel: {
      writable: true,

      value: function() {
          return this.label;
      }
    }
  });

  return Result;
}();

exports.Result = Result;
//# sourceMappingURL=data:application/json;base64,